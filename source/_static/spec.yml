openapi: 3.0.0

info:
  title: Wazuh indexer API reference
  description: |
    The Wazuh indexer API is an open source RESTful API. It allows interaction with the Wazuh indexer from a web browser, command line tools like cURL or any script or program that can make web requests. The Wazuh indexer API is used to perform actions like adding and querying the indexes, modifying the Wazuh indexer settings, etc.

    # Authentication

    Wazuh indexer API endpoints require authentication to be used. There are multiple options on what authentication mechanism to use including basic HTTP authentication and JSON Web Token (JWT). More information can be seen in [Logging into the Wazuh indexer API](https://documentation.wazuh.com/current/user-manual/indexer-api/getting-started.html#logging-into-the-wazuh-indexer-api).
  version: 1.0.0

servers:
  - url: '{protocol}://{host}:{port}'
    description: Wazuh indexer API server
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
        description: Protocol for API communication
      host:
        default: localhost
        description: Hostname or IP address
      port:
        default: '9200'
        description: API port number

security:
  - basicAuth: []
  - jwtAuth: []

paths:
  /:
    get:
      tags:
        - Get API info
      summary: API info
      description: Return basic information about the API
      operationId: getApiInfo
      security:
        - basicAuth: []
        - jwtAuth: []
      parameters:
        - $ref: '#/components/parameters/pretty'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiInfo'
              example:
                name: "node-1"
                cluster_name: "wazuh-cluster"
                cluster_uuid: "XUqydNCQTuCnvtXobnRZ8w"
                version:
                  number: "7.10.2"
                  build_type: "deb"
                  build_hash: "9fd1835bba77ae04d48550eb4dc9be4787070806"
                  build_date: "2024-08-30T10:06:03.028357Z"
                  build_snapshot: false
                  lucene_version: "9.10.0"
                  minimum_wire_compatibility_version: "7.10.0"
                  minimum_index_compatibility_version: "7.0.0"
                tagline: "The OpenSearch Project: https://opensearch.org/"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/ForbiddenApiInfo'

  /_analyze:
    get:
      tags: [Analyze API]
      summary: Text analysis (Global GET)
      description: |
        The analyze API endpoint enables text analysis by transforming unstructured text into individual tokens, typically words, optimized for search functionality. It processes a text string and returns the corresponding tokens as the output. It helps you debug and fine-tune text analysis settings for indexing and querying, providing insight into how text is broken into tokens and how filters are applied.
      operationId: analyzeGlobalGet
      parameters:
        - $ref: '#/components/parameters/analyzer'
        - $ref: '#/components/parameters/attributes'
        - $ref: '#/components/parameters/char_filter'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/normalizer'
        - $ref: '#/components/parameters/tokenizer'
        - $ref: '#/components/parameters/explain'
        - $ref: '#/components/parameters/pretty'
      requestBody:
        $ref: '#/components/requestBodies/AnalyzeRequest'
      responses:
        '200':
          $ref: '#/components/responses/AnalyzeSuccess'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/ForbiddenAnalyze'
      security:
        - basicAuth: []
        - jwtAuth: []

    post:
      tags: [Analyze API]
      summary: Text analysis (Global POST)
      description: |
        The analyze API endpoint enables text analysis by transforming unstructured text into individual tokens, typically words, optimized for search functionality. It processes a text string and returns the corresponding tokens as the output. It helps you debug and fine-tune text analysis settings for indexing and querying, providing insight into how text is broken into tokens and how filters are applied.
      operationId: analyzeGlobalPost
      parameters:
        - $ref: '#/components/parameters/analyzer'
        - $ref: '#/components/parameters/attributes'
        - $ref: '#/components/parameters/char_filter'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/normalizer'
        - $ref: '#/components/parameters/tokenizer'
        - $ref: '#/components/parameters/explain'
        - $ref: '#/components/parameters/pretty'
      requestBody:
        $ref: '#/components/requestBodies/AnalyzeRequest'
      responses:
        '200':
          $ref: '#/components/responses/AnalyzeSuccess'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/ForbiddenAnalyze'
      security:
        - basicAuth: []
        - jwtAuth: []

  /{index}/_analyze:
    parameters:
      - $ref: '#/components/parameters/index'
    get:
      tags: [Analyze API]
      summary: Text analysis (Index GET)
      description: |
        The analyze API endpoint enables text analysis by transforming unstructured text into individual tokens, typically words, optimized for search functionality. It processes a text string and returns the corresponding tokens as the output. It helps you debug and fine-tune text analysis settings for indexing and querying, providing insight into how text is broken into tokens and how filters are applied.
      operationId: analyzeIndexedGet
      parameters:
        - $ref: '#/components/parameters/analyzer'
        - $ref: '#/components/parameters/attributes'
        - $ref: '#/components/parameters/char_filter'
        - $ref: '#/components/parameters/field'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/normalizer'
        - $ref: '#/components/parameters/tokenizer'
        - $ref: '#/components/parameters/explain'
        - $ref: '#/components/parameters/pretty'
      requestBody:
        $ref: '#/components/requestBodies/AnalyzeRequest'
      responses:
        '200':
          $ref: '#/components/responses/AnalyzeSuccess'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/ForbiddenAnalyze'
      security:
        - basicAuth: []
        - jwtAuth: []

    post:
      tags: [Analyze API]
      summary: Text analysis (Index POST)
      description: |
        The analyze API endpoint enables text analysis by transforming unstructured text into individual tokens, typically words, optimized for search functionality. It processes a text string and returns the corresponding tokens as the output. It helps you debug and fine-tune text analysis settings for indexing and querying, providing insight into how text is broken into tokens and how filters are applied.
      operationId: analyzeIndexedPost
      parameters:
        - $ref: '#/components/parameters/analyzer'
        - $ref: '#/components/parameters/attributes'
        - $ref: '#/components/parameters/char_filter'
        - $ref: '#/components/parameters/field'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/normalizer'
        - $ref: '#/components/parameters/tokenizer'
        - $ref: '#/components/parameters/explain'
        - $ref: '#/components/parameters/pretty'
      requestBody:
        $ref: '#/components/requestBodies/AnalyzeRequest'
      responses:
        '200':
          $ref: '#/components/responses/AnalyzeSuccess'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/ForbiddenAnalyze'
      security:
        - basicAuth: []
        - jwtAuth: []

components:
  parameters:
    index:
      name: index
      in: path
      required: true
      description: Target index name for analyzer derivation
      schema: { type: string }

    analyzer:
      name: analyzer
      in: query
      description: |
        The name of the analyzer to apply to the `text` field. The analyzer can be built in or configured in the index.

        If analyzer is not specified, the analyze API uses the analyzer defined in the mapping of the `field` field.
      schema: { type: string }

    attributes:
      name: attributes
      in: query
      description: Array of token attributes for filtering the output of the `explain` field.
      schema:
        type: array
        items: { type: string }
      style: form
      explode: true

    char_filter:
      name: char_filter
      in: query
      description: Array of character filters for preprocessing characters before the `tokenizer` field.
      schema:
        type: array
        items: { type: string }
      style: form
      explode: true

    field:
      name: field
      in: query
      description: |
        Field for deriving the analyzer.

        If you specify `field`, you must also specify the `index` path parameter.

        If you specify the `analyzer` field, it overrides the value of `field`.

        If you do not specify `field`, the analyze API uses the default analyzer for the index.

        If you do not specify the `index` field, or the index does not have a default analyzer, the analyze API uses the standard analyzer.
      schema: { type: string }

    filter:
      name: filter
      in: query
      description: Array of token filters to apply after the `tokenizer` field.
      schema:
        type: array
        items: { type: string }
      style: form
      explode: true

    normalizer:
      name: normalizer
      in: query
      description: Normalizer for converting text into a single token.
      schema: { type: string }

    tokenizer:
      name: tokenizer
      in: query
      description: Tokenizer for converting the text field into tokens.
      schema: { type: string }

    explain:
      name: explain
      in: query
      description: If `true`, causes the response to include token attributes and additional details.
      schema:
        type: boolean
        default: false

    pretty:
      name: pretty
      in: query
      description: Show results in human-readable format.
      schema:
        type: boolean
        default: false

  schemas:
    ApiInfo:
      type: object
      properties:
        name:
          type: string
          description: The unique name of the specific Wazuh indexer node that responded to the request. In a multi-node cluster, this will be the name of the node that handled the request.
        cluster_name:
          type: string
          description: The name of the cluster which the Wazuh indexer is joined to.
        cluster_uuid:
          type: string
          description: A unique ID that identifies the Wazuh indexer node's cluster. This ID is generated when the cluster is first formed and remains constant.
        version:
          $ref: '#/components/schemas/VersionInfo'
        tagline:
          type: string
          description: Project description

    VersionInfo:
      type: object
      properties:
        number:
          type: string
          description: The version number of the Wazuh indexer node.
        build_type:
          type: string
          description: Describes how the build was packaged (e.g., `rpm`, `deb`, `tar`).
        build_hash:
          type: string
          description: A short hash of the Git commit from which this build was created. Useful for debugging and identifying the exact source code version.
        build_date:
          type: string
          format: date-time
          description: The date and time when this particular build was created.
        build_snapshot:
          type: boolean
          description: A boolean indicating if this is a snapshot build (development version) or a release build (`false` for releases).
        lucene_version:
          type: string
          description: The version of Apache Lucene, the underlying search library that Wazuh indexer uses.
        minimum_wire_compatibility_version:
          type: string
          description: The minimum version of Wazuh indexer that this node can communicate with over the network. Ensures backward compatibility.
        minimum_index_compatibility_version:
          type: string
          description: The minimum version of Wazuh indexer that this node can read indices created by. Ensures backward compatibility for stored data.

    AnalyzeRequest:
      type: object
      properties:
        text:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          description: Text to analyze. If you provide an array of strings, the text is analyzed as a multi-value field.
          example:
            analyzer: "standard"
            text: ["first array element", "second array element"]

    Token:
      type: object
      properties:
        token:
          type: string
          description: The text fragment extracted during analysis. It is a word or part of a word.
        start_offset:
          type: integer
          description: The position in the input text where this token starts.
        end_offset:
          type: integer
          description: The position in the input text where this token ends.
        type:
          type: string
          description: The type of token inputted. This can be alphanumeric or custom depending on the analyzer.
        position:
          type: integer
          description: The position of the token in the sequence of tokens, starting from 0. This can help determine word order.

    AnalyzeResponse:
      type: object
      properties:
        analyzer:
          type: string
          description: The name of the analyzer applied to the query.
        text:
          type: string
          description: The text supplied to the query for analysis.
        tokens:
          type: array
          items: { $ref: '#/components/schemas/Token' }

    SecurityError:
      type: object
      properties:
        error:
          type: object
          properties:
            root_cause:
              type: array
              items:
                type: object
                properties:
                  type: { type: string }
                  reason: { type: string }
            type: { type: string }
            reason: { type: string }
        status: { type: integer }

  requestBodies:
    AnalyzeRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AnalyzeRequest'

  responses:
    AnalyzeSuccess:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AnalyzeResponse'
          examples:
            standard:
              value:
                tokens:
                  - token: "test"
                    start_offset: 0
                    end_offset: 4
                    type: "<ALPHANUM>"
                    position: 0
                  - token: "word"
                    start_offset: 5
                    end_offset: 9
                    type: "<ALPHANUM>"
                    position: 1

    BadRequest:
      description: Response to report a bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  root_cause:
                    type: object
                    properties:
                      type: { type: string }
                      reason: { type: string }
              status: { type: integer }
          examples:
            missingText:
              value:
                error:
                  root_cause:
                    - type: "action_request_validation_exception"
                      reason: "Validation Failed: 1: text is missing;"
                  type: "action_request_validation_exception"
                  reason: "Validation Failed: 1: text is missing;"
                status: 400

    Unauthorized:
      description: Response to report an unauthorized request
      content:
        application/json:
          schema:
            type: object
            properties:
              root_cause:
                type: string
          example: "Unauthorized"

    ForbiddenApiInfo:
      description: Response to report a permission denied request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SecurityError'
          example:
            error:
              root_cause:
                - type: "security_exception"
                  reason: "no permissions for [/] and User [name=test, backend_roles=[], requestedTenant=null]"
              type: "security_exception"
              reason: "no permissions for [/] and User [name=test, backend_roles=[], requestedTenant=null]"
            status: 403

    ForbiddenAnalyze:
      description: Response to report a permission denied request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SecurityError'
          example:
            error:
              root_cause:
                - type: "security_exception"
                  reason: "no permissions for [indices:admin/analyze] and User [name=test, backend_roles=[], requestedTenant=null]"
              type: "security_exception"
              reason: "no permissions for [indices:admin/analyze] and User [name=test, backend_roles=[], requestedTenant=null]"
            status: 403

  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      description: Basic HTTP authentication
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Bearer token authentication

tags:
  - name: Get API info
    description: Wazuh indexer API information
  - name: Analyze API